#!/bin/bash

#version="$Id: $"

# ___ Help _____________________________________________________________________

if [ $# -ne 6 ] || ! ([ "xforward" == "x$1" ]) # || [ "xnew" != "x$1" ])
then
    This=`echo $0 | sed "s/^.*\///g"`
cat<<__END_OF_HELP__
Usage: $This <RelationMode> <ExtCellsMapPath1> <IntCellsMapPath2> <ExtCellsMapPath2>
        "<BSCCells> [<BSCCells> ...]" "<BSCCells> [<BSCCells> ...]"

where
 RelationMode
    There are two mode to connect the two side to each other with external GSM
    relations.
     - 'forward': Modify the existing external GSM relations to forward those
        to the other side. The number of external GSM relations will not
        change.
     - 'new': Leave the original relations unchanged and add new external GSM
        relations to the other side based on the original realtions. The number
        of external GSM relations will be doubled.
        NOTE: This option is not supported yet.
 ExtCellsMapPath1
    The map of external GSM cells on side 1 from original cell names and CGI
    values to the new cell names and CGI values.
    This file must be generated by the gen_gsm_map.sh script.
 IntCellsMapPath2
    The map of internal GSM cells on side 2 from original cell names and CGI
    values to the new CGI values.
    This file must be generated by the gen_gsm_map.sh script.
 ExtCellsMapPath2
    The map of external GSM cells on side 2 from original cell names and CGI
    values to the new cell names and CGI values.
    This file must be generated by the gen_gsm_map.sh script.
 BSCCells
    The list of internal GSM, external GSM and external UTRAN cells defined in
    a BSC node.
    This file must be generated by a list_BSC_cells*.sh script.

Example:
 $This forward cells.EXT.side1.map.csv
    cells.INT.side2.map.csv cells.EXT.side2.map.csv
    "Side1Sim1/BSC11.BSCCells Side1Sim2/BSC12.BSCCells"
    "Side2Sim1/BSC21.BSCCells Side2Sim2/BSC22.BSCCells"

DESCRIPTION:
 Update the GSM cells based on the realtion mode using the maps:
  - 'forward': modify the external GSM cells to refer the twin external GSM
    cells on the other side.
  - 'new': clone and modify the external GSM cells to refer the twin external
    GSM cells on the other side.
 The CGI values of internal GSM cells on side 2 will be updated in every case.

 The result is some MML script next to the BSCCells files that can apply the
 changes in the BSC nodes.

__END_OF_HELP__
exit 1
fi


# ___ Parameters _______________________________________________________________

# Parameters
RelationMode=$1
ExtCellsMapPath1=$2
IntCellsMapPath2=$3
ExtCellsMapPath2=$4
Side1CellsPathes=$5
Side2CellsPathes=$6


# ___ Main activity ____________________________________________________________

# Update internal GSM cells on side 1
for CellsPath in $Side1CellsPathes
do
    MMLPath=`echo $CellsPath | sed "s/\.BSCCells$/\.cells.INT.update.mml/g"`
    echo "" > $MMLPath
done

# Update external GSM cells on side 1 ...
for CellsPath in $Side1CellsPathes
do
    MMLPath=`echo $CellsPath | sed "s/\.BSCCells$/\.cells.EXT.update.mml/g"`
    # Update external GSM cells in BSC
    echo "" > $MMLPath
    if [ "xforward" == "x$RelationMode" ]
    then
        # Update external GSM cells on side 1 to refer to cells on side 2
        egrep -v "^[ ]*(#.*)?$" $CellsPath | grep ",celltype=EXT," | cut -d , -f 5 |
            cut -d = -f 2 |
            awk -F , -v ExtCellsMapPath=$ExtCellsMapPath1 \
                'BEGIN{
                    oldCgi["-"]  = "-"
                    newName["-"] = "-"
                    newCgi["-"]  = "-"
                    while((getline < ExtCellsMapPath) > 0) {
                        oldCgi[$1]  = $2
                        newName[$1] = $3
                        newCgi[$1]  = $4
                    }
                }
                {
                    OldName = $1
                    NewName = newName[OldName]
                    NewCGI  = newCgi[OldName]
                    printf "RLDEC:CELL=%s,NEWNAME=%s,CGI=%s;\n",OldName,NewName,NewCGI
                }' >> $MMLPath
#     else
#         # Create new external GSM cells on side 1 to refer to cells on side 2
#         egrep -v "^[ ]*(#.*)?$" $CellsPath | grep ",celltype=EXT," | cut -d , -f 5- |
#             awk -F , -v ExtCellsMapPath=$ExtCellsMapPath1 \
#                 'BEGIN{
#                     oldCgi["-"]  = "-"
#                     newName["-"] = "-"
#                     newCgi["-"]  = "-"
#                     while((getline < ExtCellsMapPath) > 0) {
#                         oldCgi[$1]  = $2
#                         newName[$1] = $3
#                         newCgi[$1]  = $4
#                     }
#                 }
#                 {
#                     delete field
#                     field["-"] = "-"
#                     kv["-"]    = "-"
#                     for(i=1;i<=NF;++i) {
#                         split($(i),kv,"=")
#                         field(kv[1]) = kv[2]
#                     }
#                     OldName = substr($1,1,index($1,"=")-1)
#                     NewName = newName[OldName]
#                     NewCGI  = newCgi[OldName]
#                     printf "RLDEI:CELL=%s,NEWNAME=%s,CGI=%s;\n",NewName,NewCGI
#                 }' >> $MMLPath
    fi
    echo "" >> $MMLPath
done

# Update internal GSM cells on side 2
for CellsPath in $Side2CellsPathes
do
    MSCName=`egrep -v "^[ ]*(#.*)?$" $CellsPath | grep ",msc=" | cut -d , -f 2 |
             cut -d = -f 2 | head -n 1`
    BSCName=`egrep -v "^[ ]*(#.*)?$" $CellsPath | grep ",bsc=" | cut -d , -f 3 |
             cut -d = -f 2 | head -n 1`

    MMLPath=`echo $CellsPath | sed "s/\.BSCCells$/\.cells.INT.update.mml/g"`
    # Delete internal GSM cells from MSC
    echo "" > $MMLPath
    echo ".select $MSCName" >> $MMLPath
    echo "" >> $MMLPath
    egrep -v "^[ ]*(#.*)?$" $CellsPath | grep ",celltype=INT," | cut -d , -f 5 |
        cut -d = -f 2 | sed "s/^/MGCEE:CELL=/g" | sed "s/$/;/g" >> $MMLPath
    echo "" >> $MMLPath
    # Modify internal GSM cells in BSC
    echo ".select $BSCName" >> $MMLPath
    echo "" >> $MMLPath
    egrep -v "^[ ]*(#.*)?$" $CellsPath | grep ",celltype=INT," | cut -d , -f 5 |
        cut -d = -f 2 |
        awk -F , -v IntCellsMapPath=$IntCellsMapPath2 \
            'BEGIN{
                oldCgi["-"]  = "-"
                newCgi["-"]  = "-"
                while((getline < IntCellsMapPath) > 0) {
                    oldCgi[$1]  = $2
                    newCgi[$1]  = $3
                }
            }
            {
                IntName = $1
                OldCGI  = oldCgi[IntName]
                NewCGI  = newCgi[IntName]
                if(OldCGI != NewCGI)
                    printf "RLDEC:CELL=%s,CGI=%s;\n",IntName,NewCGI
            }' >> $MMLPath
    echo "" >> $MMLPath
    # Modify internal GSM cells in MSC
    echo ".select $MSCName" >> $MMLPath
    echo "" >> $MMLPath
    egrep -v "^[ ]*(#.*)?$" $CellsPath | grep ",celltype=INT," | cut -d , -f 5 |
        cut -d = -f 2 |
        awk -F , -v IntCellsMapPath=$IntCellsMapPath2 -v BSCName=$BSCName \
            'BEGIN{
                oldCgi["-"]  = "-"
                newCgi["-"]  = "-"
                while((getline < IntCellsMapPath) > 0) {
                    oldCgi[$1]  = $2
                    newCgi[$1]  = $3
                }
            }
            {
                IntName = $1
                NewCGI  = newCgi[IntName]
                printf "MGCEI:CELL=%s,CGI=%s,BSC=%s;\n",IntName,NewCGI,BSCName
            }' >> $MMLPath
    echo "" >> $MMLPath
    echo ".select $BSCName" >> $MMLPath
    echo "" >> $MMLPath
done

for CellsPath in $Side2CellsPathes
do
    MMLPath=`echo $CellsPath | sed "s/\.BSCCells$/\.cells.EXT.update.mml/g"`
    # Update external GSM cells in BSC
    echo "" > $MMLPath
    if [ "xforward" == "x$RelationMode" ]
    then
        # Update external GSM cells on side 2 to refer to cells on side 1
        egrep -v "^[ ]*(#.*)?$" $CellsPath | grep ",celltype=EXT," | cut -d , -f 5 |
            cut -d = -f 2 |
            awk -F , -v ExtCellsMapPath=$ExtCellsMapPath2 \
                'BEGIN{
                    oldCgi["-"]  = "-"
                    newName["-"] = "-"
                    newCgi["-"]  = "-"
                    while((getline < ExtCellsMapPath) > 0) {
                        oldCgi[$1]  = $2
                        newName[$1] = $3
                        newCgi[$1]  = $4
                    }
                }
                {
                    OldName = $1
                    NewName = newName[OldName]
                    NewCGI  = newCgi[OldName]
                    printf "RLDEC:CELL=%s,NEWNAME=%s,CGI=%s;\n",OldName,NewName,NewCGI
                }' >> $MMLPath
    fi
    echo "" >> $MMLPath
done


# ___ Postprocessing ___________________________________________________________

